Label.Label1 {
    Position = (40, 40);
    Size = (217.2, 57.3548);
    Text = "Tic Tac Toe Solver";
    TextSize = 22;

    Renderer {
        BackgroundColor = transparent;
        BorderColor = #3C3C3C;
        Borders = (0, 0, 0, 0);
        TextColor = #3C3C3C;
        TextStyle = Bold | Underlined;
        TextureBackground = None;
    }
}

Label.Label2 {
    Position = (50, 100);
    Size = (320, 300);
    Text = "This is a Tic Tac Toe \"BOT\" than can Play the game tic tac toe against human players and never loose(We hope so).\n\n\nThe Bot Can Play Against Humans Leveraging the MiniMax Algorithm. The Algorithm was implemented in 2 different approches: Good Old Brute Force and an of it Using Alpha beta (Read our Paper -link below- for more Info).\n\n\nThe MiniMax Algorithm finds The Best/Most optimum play for it's turn by Calculating all possible states of the Game from the current State of the Board trying to pick the move that maximizes it's chances of winning and avoiding the paths that can give the opponent an advantage in winning hence minimizing the opponent's chance of winning.\n\n\nThe Brute Force Approach of the minimax Algorithm can find the most efficient play for it's turn with time complexity: O(n^n).\n\n\nThe Alpha Beta pruning Approach implementation on the other hand acheives Lower time complexity although it has the same worst case complexity (O(n^n)) However it never reaches this high complexity as it usually excludes branches/paths early on during the search for the best Path/move for Maximizing it's chance of Winning.\n";
    TextSize = 16;

    Renderer {
        BackgroundColor = transparent;
        BorderColor = #3C3C3C;
        Borders = (0, 0, 0, 0);
        TextColor = #3C3C3C;
        TextureBackground = None;
    }
}
